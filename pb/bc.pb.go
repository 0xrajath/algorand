// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bc.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Op int32

const (
	Op_GET  Op = 0
	Op_SEND Op = 1
)

var Op_name = map[int32]string{
	0: "GET",
	1: "SEND",
}

var Op_value = map[string]int32{
	"GET":  0,
	"SEND": 1,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}

func (Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// Represent a void message indicating success
type Success struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Success) Reset()         { *m = Success{} }
func (m *Success) String() string { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()    {}
func (*Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{1}
}

func (m *Success) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Success.Unmarshal(m, b)
}
func (m *Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Success.Marshal(b, m, deterministic)
}
func (m *Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Success.Merge(m, src)
}
func (m *Success) XXX_Size() int {
	return xxx_messageInfo_Success.Size(m)
}
func (m *Success) XXX_DiscardUnknown() {
	xxx_messageInfo_Success.DiscardUnknown(m)
}

var xxx_messageInfo_Success proto.InternalMessageInfo

// Represents an error.
type Error struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{2}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Transaction struct {
	V                    string   `protobuf:"bytes,1,opt,name=v,proto3" json:"v,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{3}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

// A single Block on a Blockchain
type Block struct {
	Id                   int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp            string         `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PrevHash             string         `protobuf:"bytes,3,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
	Hash                 string         `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Tx                   []*Transaction `protobuf:"bytes,5,rep,name=tx,proto3" json:"tx,omitempty"`
	Seed                 string         `protobuf:"bytes,6,opt,name=seed,proto3" json:"seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{4}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Block) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Block) GetPrevHash() string {
	if m != nil {
		return m.PrevHash
	}
	return ""
}

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Block) GetTx() []*Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *Block) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

// Input to AppendBlock
type AppendBlockArgs struct {
	Peer                 string   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Blockchain           []*Block `protobuf:"bytes,2,rep,name=blockchain,proto3" json:"blockchain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendBlockArgs) Reset()         { *m = AppendBlockArgs{} }
func (m *AppendBlockArgs) String() string { return proto.CompactTextString(m) }
func (*AppendBlockArgs) ProtoMessage()    {}
func (*AppendBlockArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{5}
}

func (m *AppendBlockArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendBlockArgs.Unmarshal(m, b)
}
func (m *AppendBlockArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendBlockArgs.Marshal(b, m, deterministic)
}
func (m *AppendBlockArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendBlockArgs.Merge(m, src)
}
func (m *AppendBlockArgs) XXX_Size() int {
	return xxx_messageInfo_AppendBlockArgs.Size(m)
}
func (m *AppendBlockArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendBlockArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AppendBlockArgs proto.InternalMessageInfo

func (m *AppendBlockArgs) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *AppendBlockArgs) GetBlockchain() []*Block {
	if m != nil {
		return m.Blockchain
	}
	return nil
}

type AppendBlockRet struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendBlockRet) Reset()         { *m = AppendBlockRet{} }
func (m *AppendBlockRet) String() string { return proto.CompactTextString(m) }
func (*AppendBlockRet) ProtoMessage()    {}
func (*AppendBlockRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{6}
}

func (m *AppendBlockRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendBlockRet.Unmarshal(m, b)
}
func (m *AppendBlockRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendBlockRet.Marshal(b, m, deterministic)
}
func (m *AppendBlockRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendBlockRet.Merge(m, src)
}
func (m *AppendBlockRet) XXX_Size() int {
	return xxx_messageInfo_AppendBlockRet.Size(m)
}
func (m *AppendBlockRet) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendBlockRet.DiscardUnknown(m)
}

var xxx_messageInfo_AppendBlockRet proto.InternalMessageInfo

func (m *AppendBlockRet) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type AppendTransactionArgs struct {
	Peer                 string       `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Tx                   *Transaction `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AppendTransactionArgs) Reset()         { *m = AppendTransactionArgs{} }
func (m *AppendTransactionArgs) String() string { return proto.CompactTextString(m) }
func (*AppendTransactionArgs) ProtoMessage()    {}
func (*AppendTransactionArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{7}
}

func (m *AppendTransactionArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendTransactionArgs.Unmarshal(m, b)
}
func (m *AppendTransactionArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendTransactionArgs.Marshal(b, m, deterministic)
}
func (m *AppendTransactionArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendTransactionArgs.Merge(m, src)
}
func (m *AppendTransactionArgs) XXX_Size() int {
	return xxx_messageInfo_AppendTransactionArgs.Size(m)
}
func (m *AppendTransactionArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendTransactionArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AppendTransactionArgs proto.InternalMessageInfo

func (m *AppendTransactionArgs) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *AppendTransactionArgs) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type AppendTransactionRet struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendTransactionRet) Reset()         { *m = AppendTransactionRet{} }
func (m *AppendTransactionRet) String() string { return proto.CompactTextString(m) }
func (*AppendTransactionRet) ProtoMessage()    {}
func (*AppendTransactionRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{8}
}

func (m *AppendTransactionRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendTransactionRet.Unmarshal(m, b)
}
func (m *AppendTransactionRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendTransactionRet.Marshal(b, m, deterministic)
}
func (m *AppendTransactionRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendTransactionRet.Merge(m, src)
}
func (m *AppendTransactionRet) XXX_Size() int {
	return xxx_messageInfo_AppendTransactionRet.Size(m)
}
func (m *AppendTransactionRet) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendTransactionRet.DiscardUnknown(m)
}

var xxx_messageInfo_AppendTransactionRet proto.InternalMessageInfo

func (m *AppendTransactionRet) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ProposeBlockArgs struct {
	Credential           *SIGRet  `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Block                *Block   `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Round                int64    `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Peer                 string   `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposeBlockArgs) Reset()         { *m = ProposeBlockArgs{} }
func (m *ProposeBlockArgs) String() string { return proto.CompactTextString(m) }
func (*ProposeBlockArgs) ProtoMessage()    {}
func (*ProposeBlockArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{9}
}

func (m *ProposeBlockArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposeBlockArgs.Unmarshal(m, b)
}
func (m *ProposeBlockArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposeBlockArgs.Marshal(b, m, deterministic)
}
func (m *ProposeBlockArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeBlockArgs.Merge(m, src)
}
func (m *ProposeBlockArgs) XXX_Size() int {
	return xxx_messageInfo_ProposeBlockArgs.Size(m)
}
func (m *ProposeBlockArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeBlockArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeBlockArgs proto.InternalMessageInfo

func (m *ProposeBlockArgs) GetCredential() *SIGRet {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (m *ProposeBlockArgs) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ProposeBlockArgs) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ProposeBlockArgs) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ProposeBlockArgs) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

type ProposeBlockRet struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposeBlockRet) Reset()         { *m = ProposeBlockRet{} }
func (m *ProposeBlockRet) String() string { return proto.CompactTextString(m) }
func (*ProposeBlockRet) ProtoMessage()    {}
func (*ProposeBlockRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{10}
}

func (m *ProposeBlockRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposeBlockRet.Unmarshal(m, b)
}
func (m *ProposeBlockRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposeBlockRet.Marshal(b, m, deterministic)
}
func (m *ProposeBlockRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeBlockRet.Merge(m, src)
}
func (m *ProposeBlockRet) XXX_Size() int {
	return xxx_messageInfo_ProposeBlockRet.Size(m)
}
func (m *ProposeBlockRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeBlockRet.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeBlockRet proto.InternalMessageInfo

func (m *ProposeBlockRet) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type VoteArgs struct {
	Message              *SIGRet  `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Round                int64    `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Period               int64    `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	Peer                 string   `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteArgs) Reset()         { *m = VoteArgs{} }
func (m *VoteArgs) String() string { return proto.CompactTextString(m) }
func (*VoteArgs) ProtoMessage()    {}
func (*VoteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{11}
}

func (m *VoteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteArgs.Unmarshal(m, b)
}
func (m *VoteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteArgs.Marshal(b, m, deterministic)
}
func (m *VoteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteArgs.Merge(m, src)
}
func (m *VoteArgs) XXX_Size() int {
	return xxx_messageInfo_VoteArgs.Size(m)
}
func (m *VoteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_VoteArgs proto.InternalMessageInfo

func (m *VoteArgs) GetMessage() *SIGRet {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *VoteArgs) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteArgs) GetPeriod() int64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *VoteArgs) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

type VoteRet struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteRet) Reset()         { *m = VoteRet{} }
func (m *VoteRet) String() string { return proto.CompactTextString(m) }
func (*VoteRet) ProtoMessage()    {}
func (*VoteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{12}
}

func (m *VoteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteRet.Unmarshal(m, b)
}
func (m *VoteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteRet.Marshal(b, m, deterministic)
}
func (m *VoteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteRet.Merge(m, src)
}
func (m *VoteRet) XXX_Size() int {
	return xxx_messageInfo_VoteRet.Size(m)
}
func (m *VoteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VoteRet proto.InternalMessageInfo

func (m *VoteRet) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SIGRet struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Message              []string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"`
	SignedMessage        string   `protobuf:"bytes,3,opt,name=signedMessage,proto3" json:"signedMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SIGRet) Reset()         { *m = SIGRet{} }
func (m *SIGRet) String() string { return proto.CompactTextString(m) }
func (*SIGRet) ProtoMessage()    {}
func (*SIGRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{13}
}

func (m *SIGRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SIGRet.Unmarshal(m, b)
}
func (m *SIGRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SIGRet.Marshal(b, m, deterministic)
}
func (m *SIGRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SIGRet.Merge(m, src)
}
func (m *SIGRet) XXX_Size() int {
	return xxx_messageInfo_SIGRet.Size(m)
}
func (m *SIGRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SIGRet.DiscardUnknown(m)
}

var xxx_messageInfo_SIGRet proto.InternalMessageInfo

func (m *SIGRet) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SIGRet) GetMessage() []string {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SIGRet) GetSignedMessage() string {
	if m != nil {
		return m.SignedMessage
	}
	return ""
}

type RequestBlockChainArgs struct {
	Peer                 string   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestBlockChainArgs) Reset()         { *m = RequestBlockChainArgs{} }
func (m *RequestBlockChainArgs) String() string { return proto.CompactTextString(m) }
func (*RequestBlockChainArgs) ProtoMessage()    {}
func (*RequestBlockChainArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{14}
}

func (m *RequestBlockChainArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestBlockChainArgs.Unmarshal(m, b)
}
func (m *RequestBlockChainArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestBlockChainArgs.Marshal(b, m, deterministic)
}
func (m *RequestBlockChainArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBlockChainArgs.Merge(m, src)
}
func (m *RequestBlockChainArgs) XXX_Size() int {
	return xxx_messageInfo_RequestBlockChainArgs.Size(m)
}
func (m *RequestBlockChainArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBlockChainArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBlockChainArgs proto.InternalMessageInfo

func (m *RequestBlockChainArgs) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

type RequestBlockChainRet struct {
	Peer                 string            `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Blockchain           []*Block          `protobuf:"bytes,2,rep,name=blockchain,proto3" json:"blockchain,omitempty"`
	Proposedblock        *ProposeBlockArgs `protobuf:"bytes,3,opt,name=proposedblock,proto3" json:"proposedblock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RequestBlockChainRet) Reset()         { *m = RequestBlockChainRet{} }
func (m *RequestBlockChainRet) String() string { return proto.CompactTextString(m) }
func (*RequestBlockChainRet) ProtoMessage()    {}
func (*RequestBlockChainRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{15}
}

func (m *RequestBlockChainRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestBlockChainRet.Unmarshal(m, b)
}
func (m *RequestBlockChainRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestBlockChainRet.Marshal(b, m, deterministic)
}
func (m *RequestBlockChainRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBlockChainRet.Merge(m, src)
}
func (m *RequestBlockChainRet) XXX_Size() int {
	return xxx_messageInfo_RequestBlockChainRet.Size(m)
}
func (m *RequestBlockChainRet) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBlockChainRet.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBlockChainRet proto.InternalMessageInfo

func (m *RequestBlockChainRet) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *RequestBlockChainRet) GetBlockchain() []*Block {
	if m != nil {
		return m.Blockchain
	}
	return nil
}

func (m *RequestBlockChainRet) GetProposedblock() *ProposeBlockArgs {
	if m != nil {
		return m.Proposedblock
	}
	return nil
}

type Blockchain struct {
	Blocks               []*Block `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blockchain) Reset()         { *m = Blockchain{} }
func (m *Blockchain) String() string { return proto.CompactTextString(m) }
func (*Blockchain) ProtoMessage()    {}
func (*Blockchain) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{16}
}

func (m *Blockchain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blockchain.Unmarshal(m, b)
}
func (m *Blockchain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blockchain.Marshal(b, m, deterministic)
}
func (m *Blockchain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blockchain.Merge(m, src)
}
func (m *Blockchain) XXX_Size() int {
	return xxx_messageInfo_Blockchain.Size(m)
}
func (m *Blockchain) XXX_DiscardUnknown() {
	xxx_messageInfo_Blockchain.DiscardUnknown(m)
}

var xxx_messageInfo_Blockchain proto.InternalMessageInfo

func (m *Blockchain) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type Result struct {
	// Types that are valid to be assigned to Result:
	//	*Result_Bc
	//	*Result_S
	Result               isResult_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{17}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

type isResult_Result interface {
	isResult_Result()
}

type Result_Bc struct {
	Bc *Blockchain `protobuf:"bytes,1,opt,name=bc,proto3,oneof"`
}

type Result_S struct {
	S *Success `protobuf:"bytes,2,opt,name=s,proto3,oneof"`
}

func (*Result_Bc) isResult_Result() {}

func (*Result_S) isResult_Result() {}

func (m *Result) GetResult() isResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Result) GetBc() *Blockchain {
	if x, ok := m.GetResult().(*Result_Bc); ok {
		return x.Bc
	}
	return nil
}

func (m *Result) GetS() *Success {
	if x, ok := m.GetResult().(*Result_S); ok {
		return x.S
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Result) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Result_OneofMarshaler, _Result_OneofUnmarshaler, _Result_OneofSizer, []interface{}{
		(*Result_Bc)(nil),
		(*Result_S)(nil),
	}
}

func _Result_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Result)
	// result
	switch x := m.Result.(type) {
	case *Result_Bc:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bc); err != nil {
			return err
		}
	case *Result_S:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.S); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Result.Result has unexpected type %T", x)
	}
	return nil
}

func _Result_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Result)
	switch tag {
	case 1: // result.bc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Blockchain)
		err := b.DecodeMessage(msg)
		m.Result = &Result_Bc{msg}
		return true, err
	case 2: // result.s
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Success)
		err := b.DecodeMessage(msg)
		m.Result = &Result_S{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Result_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Result)
	// result
	switch x := m.Result.(type) {
	case *Result_Bc:
		s := proto.Size(x.Bc)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Result_S:
		s := proto.Size(x.S)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A type for arguments across all operations
type Command struct {
	Operation Op `protobuf:"varint,1,opt,name=operation,proto3,enum=pb.Op" json:"operation,omitempty"`
	// Types that are valid to be assigned to Arg:
	//	*Command_Empty
	//	*Command_Tx
	Arg                  isCommand_Arg `protobuf_oneof:"arg"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e2a20f8b284799, []int{18}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetOperation() Op {
	if m != nil {
		return m.Operation
	}
	return Op_GET
}

type isCommand_Arg interface {
	isCommand_Arg()
}

type Command_Empty struct {
	Empty *Empty `protobuf:"bytes,2,opt,name=empty,proto3,oneof"`
}

type Command_Tx struct {
	Tx *Transaction `protobuf:"bytes,3,opt,name=tx,proto3,oneof"`
}

func (*Command_Empty) isCommand_Arg() {}

func (*Command_Tx) isCommand_Arg() {}

func (m *Command) GetArg() isCommand_Arg {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *Command) GetEmpty() *Empty {
	if x, ok := m.GetArg().(*Command_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *Command) GetTx() *Transaction {
	if x, ok := m.GetArg().(*Command_Tx); ok {
		return x.Tx
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Command) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Command_OneofMarshaler, _Command_OneofUnmarshaler, _Command_OneofSizer, []interface{}{
		(*Command_Empty)(nil),
		(*Command_Tx)(nil),
	}
}

func _Command_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Command)
	// arg
	switch x := m.Arg.(type) {
	case *Command_Empty:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *Command_Tx:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tx); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Command.Arg has unexpected type %T", x)
	}
	return nil
}

func _Command_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Command)
	switch tag {
	case 2: // arg.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Empty)
		err := b.DecodeMessage(msg)
		m.Arg = &Command_Empty{msg}
		return true, err
	case 3: // arg.tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Arg = &Command_Tx{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Command_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Command)
	// arg
	switch x := m.Arg.(type) {
	case *Command_Empty:
		s := proto.Size(x.Empty)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_Tx:
		s := proto.Size(x.Tx)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("pb.Op", Op_name, Op_value)
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*Success)(nil), "pb.Success")
	proto.RegisterType((*Error)(nil), "pb.Error")
	proto.RegisterType((*Transaction)(nil), "pb.Transaction")
	proto.RegisterType((*Block)(nil), "pb.Block")
	proto.RegisterType((*AppendBlockArgs)(nil), "pb.AppendBlockArgs")
	proto.RegisterType((*AppendBlockRet)(nil), "pb.AppendBlockRet")
	proto.RegisterType((*AppendTransactionArgs)(nil), "pb.AppendTransactionArgs")
	proto.RegisterType((*AppendTransactionRet)(nil), "pb.AppendTransactionRet")
	proto.RegisterType((*ProposeBlockArgs)(nil), "pb.ProposeBlockArgs")
	proto.RegisterType((*ProposeBlockRet)(nil), "pb.ProposeBlockRet")
	proto.RegisterType((*VoteArgs)(nil), "pb.VoteArgs")
	proto.RegisterType((*VoteRet)(nil), "pb.VoteRet")
	proto.RegisterType((*SIGRet)(nil), "pb.SIGRet")
	proto.RegisterType((*RequestBlockChainArgs)(nil), "pb.RequestBlockChainArgs")
	proto.RegisterType((*RequestBlockChainRet)(nil), "pb.RequestBlockChainRet")
	proto.RegisterType((*Blockchain)(nil), "pb.Blockchain")
	proto.RegisterType((*Result)(nil), "pb.Result")
	proto.RegisterType((*Command)(nil), "pb.Command")
}

func init() { proto.RegisterFile("bc.proto", fileDescriptor_99e2a20f8b284799) }

var fileDescriptor_99e2a20f8b284799 = []byte{
	// 787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x4f, 0xdb, 0x48,
	0x14, 0x8f, 0xed, 0xd8, 0x4e, 0x5e, 0x20, 0x64, 0x87, 0xb0, 0x6b, 0xc2, 0x6a, 0x81, 0x81, 0x95,
	0x28, 0x48, 0xb4, 0x4a, 0x2f, 0x55, 0x7b, 0x22, 0x34, 0x22, 0x54, 0x6d, 0xa1, 0x13, 0xd4, 0x73,
	0x1d, 0x7b, 0x14, 0xac, 0x26, 0xb6, 0x3b, 0x33, 0x89, 0xa8, 0xd4, 0x2f, 0xd1, 0x6b, 0x2f, 0xfd,
	0x26, 0xfd, 0x6c, 0xd5, 0xcc, 0x38, 0xb1, 0x49, 0x02, 0x97, 0xde, 0xfc, 0xfe, 0xff, 0xde, 0x7b,
	0xbf, 0x79, 0x86, 0xca, 0x20, 0x38, 0x4d, 0x59, 0x22, 0x12, 0x64, 0xa6, 0x03, 0xec, 0x82, 0xdd,
	0x1d, 0xa7, 0xe2, 0x2b, 0xae, 0x82, 0xdb, 0x9f, 0x04, 0x01, 0xe5, 0x1c, 0x6f, 0x83, 0xdd, 0x65,
	0x2c, 0x61, 0xa8, 0x01, 0xd6, 0x98, 0x0f, 0x3d, 0x63, 0xcf, 0x38, 0xaa, 0x12, 0xf9, 0x89, 0x77,
	0xa0, 0x76, 0xc3, 0xfc, 0x98, 0xfb, 0x81, 0x88, 0x92, 0x18, 0xad, 0x81, 0x31, 0xcd, 0xcc, 0xc6,
	0x14, 0xff, 0x30, 0xc0, 0xee, 0x8c, 0x92, 0xe0, 0x33, 0xaa, 0x83, 0x19, 0x85, 0xca, 0x60, 0x11,
	0x33, 0x0a, 0xd1, 0xbf, 0x50, 0x15, 0xd1, 0x98, 0x72, 0xe1, 0x8f, 0x53, 0xcf, 0x54, 0xfe, 0xb9,
	0x02, 0xb5, 0xa0, 0x92, 0x32, 0x3a, 0xed, 0xf9, 0xfc, 0xd6, 0xb3, 0x94, 0x71, 0x2e, 0x23, 0x04,
	0xe5, 0x5b, 0xa9, 0x2f, 0x2b, 0xbd, 0xfa, 0x46, 0xbb, 0x60, 0x8a, 0x3b, 0xcf, 0xde, 0xb3, 0x8e,
	0x6a, 0xed, 0x8d, 0xd3, 0x74, 0x70, 0x5a, 0x80, 0x44, 0x4c, 0x71, 0x27, 0x83, 0x38, 0xa5, 0xa1,
	0xe7, 0xe8, 0x20, 0xf9, 0x8d, 0xaf, 0x61, 0xe3, 0x2c, 0x4d, 0x69, 0x1c, 0x2a, 0x84, 0x67, 0x6c,
	0xc8, 0xa5, 0x5b, 0x4a, 0x29, 0xcb, 0x1a, 0x50, 0xdf, 0xe8, 0x09, 0xc0, 0x40, 0x3a, 0x04, 0xb7,
	0x7e, 0x14, 0x7b, 0xa6, 0xaa, 0x51, 0x95, 0x35, 0x54, 0x18, 0x29, 0x18, 0xf1, 0x31, 0xd4, 0x0b,
	0x19, 0x09, 0x15, 0xc8, 0x03, 0x97, 0xeb, 0x19, 0xaa, 0x9c, 0x15, 0x32, 0x13, 0xf1, 0x5b, 0xd8,
	0xd2, 0xbe, 0x05, 0xa8, 0x0f, 0x62, 0xd0, 0xfd, 0xc9, 0x31, 0xad, 0xee, 0x0f, 0x3f, 0x83, 0xe6,
	0x52, 0xb6, 0xc7, 0xeb, 0xff, 0x34, 0xa0, 0x71, 0xcd, 0x92, 0x34, 0xe1, 0x34, 0xef, 0xff, 0x18,
	0x20, 0x60, 0x34, 0xa4, 0xb1, 0x88, 0xfc, 0x91, 0x8a, 0xa8, 0xb5, 0x41, 0xd6, 0xeb, 0x5f, 0x5e,
	0x10, 0x2a, 0x48, 0xc1, 0x8a, 0x76, 0xc1, 0x56, 0xad, 0x67, 0xb0, 0x0a, 0x23, 0xd1, 0x7a, 0xd4,
	0x04, 0x7b, 0xea, 0x8f, 0x26, 0x34, 0xdb, 0xa0, 0x16, 0xa4, 0x96, 0x25, 0x93, 0x38, 0x54, 0xfb,
	0xb3, 0x88, 0x16, 0xe6, 0x4d, 0xdb, 0x79, 0xd3, 0xf8, 0x04, 0x36, 0x8a, 0x00, 0x1f, 0x6f, 0x87,
	0x41, 0xe5, 0x63, 0x22, 0xa8, 0xea, 0xe2, 0x10, 0xdc, 0x31, 0xe5, 0xdc, 0x1f, 0xd2, 0x15, 0x2d,
	0xcc, 0x4c, 0x39, 0x10, 0xb3, 0x08, 0xe4, 0x6f, 0x70, 0x52, 0xca, 0xa2, 0x24, 0x54, 0xa8, 0x2d,
	0x92, 0x49, 0x73, 0x80, 0xe5, 0x02, 0xc0, 0x03, 0x70, 0x65, 0xcd, 0xc7, 0x81, 0x7d, 0x02, 0x47,
	0x57, 0x96, 0xa9, 0x27, 0x9c, 0xb2, 0xcb, 0x30, 0x5b, 0x6d, 0x26, 0xc9, 0xd8, 0x19, 0x5c, 0xc9,
	0xae, 0x6a, 0x0e, 0xf1, 0x10, 0xd6, 0x79, 0x34, 0x8c, 0x69, 0xf8, 0x2e, 0xb3, 0xeb, 0x49, 0xde,
	0x57, 0xe2, 0x13, 0xd8, 0x22, 0xf4, 0xcb, 0x84, 0x72, 0xa1, 0xe6, 0x74, 0x2e, 0xa9, 0xf8, 0x10,
	0x93, 0xf0, 0x77, 0x03, 0x9a, 0x4b, 0xde, 0x12, 0xdd, 0x9f, 0x51, 0x1f, 0xbd, 0x84, 0xf5, 0x54,
	0x2f, 0x2b, 0xd4, 0xac, 0xb0, 0xd4, 0xe4, 0x9b, 0xd2, 0x7b, 0x91, 0x66, 0xe4, 0xbe, 0x2b, 0x7e,
	0x0a, 0xd0, 0xc9, 0x33, 0xed, 0x83, 0xa3, 0xd4, 0x72, 0x92, 0x0b, 0x05, 0x33, 0x03, 0xfe, 0x00,
	0x0e, 0xa1, 0x7c, 0x32, 0x12, 0x68, 0x0f, 0xcc, 0x41, 0x90, 0x6d, 0xb9, 0x3e, 0x77, 0x54, 0x89,
	0x7a, 0x25, 0x62, 0x0e, 0x02, 0xb4, 0x03, 0x06, 0xcf, 0x28, 0x5a, 0x53, 0x34, 0xd0, 0x7b, 0xe9,
	0x95, 0x88, 0xc1, 0x3b, 0x15, 0x70, 0x98, 0x4a, 0x84, 0xbf, 0x81, 0x7b, 0x9e, 0x8c, 0xc7, 0x7e,
	0x1c, 0xa2, 0x43, 0xa8, 0x26, 0x29, 0x65, 0xbe, 0x7c, 0x43, 0x2a, 0x75, 0xbd, 0xed, 0xc8, 0xc8,
	0xab, 0x94, 0xe4, 0x06, 0xb4, 0x0f, 0x36, 0x95, 0x67, 0xb2, 0x48, 0x7f, 0x75, 0x37, 0x7b, 0x25,
	0xa2, 0x2d, 0x68, 0x5f, 0xbd, 0x5a, 0x6b, 0xe5, 0xab, 0x95, 0xe8, 0xc4, 0x5d, 0xc7, 0x06, 0xcb,
	0x67, 0xc3, 0xe3, 0x7f, 0xc0, 0xbc, 0x4a, 0x91, 0x0b, 0xd6, 0x45, 0xf7, 0xa6, 0x51, 0x42, 0x15,
	0x28, 0xf7, 0xbb, 0xef, 0x5f, 0x37, 0x8c, 0xf6, 0x2f, 0x13, 0x2a, 0x67, 0xa3, 0x61, 0xc2, 0x24,
	0xb0, 0x17, 0x50, 0x2b, 0x9c, 0x17, 0xb4, 0x29, 0x53, 0x2e, 0x5c, 0xb0, 0x16, 0x5a, 0x50, 0x12,
	0x2a, 0x70, 0x09, 0xbd, 0x81, 0xbf, 0x96, 0xce, 0x03, 0xda, 0xce, 0x5d, 0x17, 0x6e, 0x50, 0xcb,
	0x5b, 0x69, 0xd2, 0xb9, 0x5e, 0xc1, 0x5a, 0x71, 0xa1, 0x68, 0xe5, 0x8a, 0x5b, 0x9b, 0x8b, 0x5a,
	0x1d, 0x7c, 0x00, 0x65, 0xf9, 0x64, 0xd0, 0x9a, 0x34, 0xcf, 0x1e, 0x6c, 0xab, 0x36, 0x93, 0xe6,
	0x68, 0x97, 0x28, 0xaa, 0xd1, 0xae, 0xe4, 0xb9, 0x46, 0xbb, 0x8a, 0xd4, 0xb8, 0xd4, 0xbe, 0x06,
	0xb7, 0x73, 0xde, 0x17, 0x09, 0xa3, 0xe8, 0x3f, 0xb0, 0x2e, 0xa8, 0x40, 0xf9, 0xa6, 0x5a, 0xa0,
	0x03, 0x15, 0x01, 0x4a, 0xe8, 0x7f, 0x28, 0xf7, 0x69, 0x1c, 0xa2, 0xc5, 0x55, 0xdd, 0x77, 0x1b,
	0x38, 0xea, 0x57, 0xf9, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x28, 0xb0, 0xb8, 0x36,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AlgorandClient is the client API for Algorand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlgorandClient interface {
	AppendBlock(ctx context.Context, in *AppendBlockArgs, opts ...grpc.CallOption) (*AppendBlockRet, error)
	AppendTransaction(ctx context.Context, in *AppendTransactionArgs, opts ...grpc.CallOption) (*AppendTransactionRet, error)
	ProposeBlock(ctx context.Context, in *ProposeBlockArgs, opts ...grpc.CallOption) (*ProposeBlockRet, error)
	Vote(ctx context.Context, in *VoteArgs, opts ...grpc.CallOption) (*VoteRet, error)
	RequestBlockChain(ctx context.Context, in *RequestBlockChainArgs, opts ...grpc.CallOption) (*RequestBlockChainRet, error)
}

type algorandClient struct {
	cc *grpc.ClientConn
}

func NewAlgorandClient(cc *grpc.ClientConn) AlgorandClient {
	return &algorandClient{cc}
}

func (c *algorandClient) AppendBlock(ctx context.Context, in *AppendBlockArgs, opts ...grpc.CallOption) (*AppendBlockRet, error) {
	out := new(AppendBlockRet)
	err := c.cc.Invoke(ctx, "/pb.Algorand/AppendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algorandClient) AppendTransaction(ctx context.Context, in *AppendTransactionArgs, opts ...grpc.CallOption) (*AppendTransactionRet, error) {
	out := new(AppendTransactionRet)
	err := c.cc.Invoke(ctx, "/pb.Algorand/AppendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algorandClient) ProposeBlock(ctx context.Context, in *ProposeBlockArgs, opts ...grpc.CallOption) (*ProposeBlockRet, error) {
	out := new(ProposeBlockRet)
	err := c.cc.Invoke(ctx, "/pb.Algorand/ProposeBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algorandClient) Vote(ctx context.Context, in *VoteArgs, opts ...grpc.CallOption) (*VoteRet, error) {
	out := new(VoteRet)
	err := c.cc.Invoke(ctx, "/pb.Algorand/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algorandClient) RequestBlockChain(ctx context.Context, in *RequestBlockChainArgs, opts ...grpc.CallOption) (*RequestBlockChainRet, error) {
	out := new(RequestBlockChainRet)
	err := c.cc.Invoke(ctx, "/pb.Algorand/RequestBlockChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlgorandServer is the server API for Algorand service.
type AlgorandServer interface {
	AppendBlock(context.Context, *AppendBlockArgs) (*AppendBlockRet, error)
	AppendTransaction(context.Context, *AppendTransactionArgs) (*AppendTransactionRet, error)
	ProposeBlock(context.Context, *ProposeBlockArgs) (*ProposeBlockRet, error)
	Vote(context.Context, *VoteArgs) (*VoteRet, error)
	RequestBlockChain(context.Context, *RequestBlockChainArgs) (*RequestBlockChainRet, error)
}

func RegisterAlgorandServer(s *grpc.Server, srv AlgorandServer) {
	s.RegisterService(&_Algorand_serviceDesc, srv)
}

func _Algorand_AppendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendBlockArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgorandServer).AppendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Algorand/AppendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgorandServer).AppendBlock(ctx, req.(*AppendBlockArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algorand_AppendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendTransactionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgorandServer).AppendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Algorand/AppendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgorandServer).AppendTransaction(ctx, req.(*AppendTransactionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algorand_ProposeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeBlockArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgorandServer).ProposeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Algorand/ProposeBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgorandServer).ProposeBlock(ctx, req.(*ProposeBlockArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algorand_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgorandServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Algorand/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgorandServer).Vote(ctx, req.(*VoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algorand_RequestBlockChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBlockChainArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgorandServer).RequestBlockChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Algorand/RequestBlockChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgorandServer).RequestBlockChain(ctx, req.(*RequestBlockChainArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Algorand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Algorand",
	HandlerType: (*AlgorandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendBlock",
			Handler:    _Algorand_AppendBlock_Handler,
		},
		{
			MethodName: "AppendTransaction",
			Handler:    _Algorand_AppendTransaction_Handler,
		},
		{
			MethodName: "ProposeBlock",
			Handler:    _Algorand_ProposeBlock_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Algorand_Vote_Handler,
		},
		{
			MethodName: "RequestBlockChain",
			Handler:    _Algorand_RequestBlockChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bc.proto",
}

// BCStoreClient is the client API for BCStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BCStoreClient interface {
	Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error)
	Send(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Result, error)
}

type bCStoreClient struct {
	cc *grpc.ClientConn
}

func NewBCStoreClient(cc *grpc.ClientConn) BCStoreClient {
	return &bCStoreClient{cc}
}

func (c *bCStoreClient) Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.BCStore/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCStoreClient) Send(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.BCStore/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BCStoreServer is the server API for BCStore service.
type BCStoreServer interface {
	Get(context.Context, *Empty) (*Result, error)
	Send(context.Context, *Transaction) (*Result, error)
}

func RegisterBCStoreServer(s *grpc.Server, srv BCStoreServer) {
	s.RegisterService(&_BCStore_serviceDesc, srv)
}

func _BCStore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCStoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BCStore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCStoreServer).Get(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCStore_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCStoreServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BCStore/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCStoreServer).Send(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _BCStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BCStore",
	HandlerType: (*BCStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BCStore_Get_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _BCStore_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bc.proto",
}
