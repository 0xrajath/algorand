syntax = "proto3";

package pb;


message Empty{
}

// Represent a void message indicating success
message Success {
}

// Represents an error.
message Error {
    string msg = 1;
}

message Transaction {
    string v = 1;
}

// A single Block on a Blockchain
message Block {
    int64 id = 1;
    string timestamp = 2;
    string prevHash = 3;
    string hash = 4;
    repeated Transaction tx = 5;
    string seed = 6;
}

// Input to AppendBlock
message AppendBlockArgs {
    string peer = 1;
    repeated Block blockchain = 2;
}

message AppendBlockRet {
    bool success = 1;
}

message AppendTransactionArgs {
    string peer = 1;
    Transaction tx = 2;
}

message AppendTransactionRet {
    bool success = 1;
}

message ProposeBlockArgs {
    SIGRet credential = 1;
    string block = 2;
}

message ProposeBlockRet {
    bool success = 1;
}

message SIGArgs {
    string v = 1;
    string type = 2;
    int64 p = 3;
}

message SIGRet {
    string userId = 1;
    repeated string message = 2;
    string signedMessage = 3;
}

// Algorand service
service Algorand {
    rpc AppendBlock(AppendBlockArgs) returns (AppendBlockRet) {}
    rpc AppendTransaction(AppendTransactionArgs) returns (AppendTransactionRet) {}
    rpc ProposeBlock(ProposeBlockArgs) returns (ProposeBlockRet) {}
    rpc SIG(SIGArgs) returns (SIGRet) {}
}

message Blockchain {
    repeated Block blocks = 1;
}

message Result {
    oneof result {
        Blockchain bc = 1;
        Success s = 2;
    }
}

enum Op {
    GET = 0;
    SEND = 1;
}

// A type for arguments across all operations
message Command {
    Op operation = 1;
    oneof arg {
        Empty empty = 2;
        Transaction tx = 3;
    }
}

// Client service to add to blockchain
service BCStore {
    rpc Get (Empty) returns (Result) {}
    rpc Send (Transaction) returns (Result) {}
}
